<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:s="http://purl.oclc.org/dsdl/schematron">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>ACDH-CH Dictionary Schema</title>
            <author>
               <name xml:id="CM">Charly Mörth</name>
            </author>
            <author>
               <name xml:id="DS">Daniel Schopper</name>
            </author>
            <respStmt>
              <resp>contributor</resp>
               <name xml:id="MRS">Michaela Rausch-Supola</name>
            </respStmt>
            <respStmt>
               <resp>contributor</resp>
               <name xml:id="KS">Kinga Sramó</name>
            </respStmt>
            <respStmt>
               <resp>contributor</resp>
               <name xml:id="VE">Veronika Engler</name>
            </respStmt>
         </titleStmt>
         <publicationStmt>
            <publisher>Austrian Centre for Digital Humanities and Cultural Heritage</publisher>
            <date>2021</date>
         </publicationStmt>
         <sourceDesc>
            <p>This ODD is a customization of TEI Lex-0, adapted for the needs of the dictionaries
               produced at ACDH-CH.</p>
         </sourceDesc>
      </fileDesc>
      <revisionDesc>
         <change status="draft" when="2021-12-02">set up ODD, git repo and processing structure;
            incorporating most definitions from the VICAV dicts ODD, except for the prose part and
            the fvLib – TODO discuss if that is general enough to be included here or if it should
            be kept as a project/dictionary-specific vocabulary.</change>
         <change status="draft" when="2024-07-26" who="#DS">fixing elementSpec for body; reducing tagset</change>
      </revisionDesc>
   </teiHeader>
   <text>
      <front>
         <argument>
            <p>This TEI customization is a baseline schema all dictionaries encoded at the ACDH-CH
               should conform with. </p>
         </argument>
      </front>
      <body>
         <head>Part 1: Encoder Documentation</head>
         <div>
            <head>Basic Dictionary Structure</head>
            <p>The dictionaries covered by this schema are encoded according to the Guidelines of
               the Text Encoding Initiative (P5). They are conceptualised as a specific type of text
               and are therefore encoded with <gi>text</gi> elements. Each dictionary starts with a
                  <gi>teiHeader</gi> element which contains the metadata of the dictionary.</p>

            <p>The lexicographic data are placed in typed <gi>div</gi> elements. Thus, our TEI
               dictionaries basically look like this:</p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="feasible">
               <TEI version="5.0">
                  <teiHeader> ... </teiHeader>
                  <text>
                     <body>
                        <div type="entries">
                           <entry>...</entry>
                           <entry>...</entry>
                           <entry>...</entry>
                        </div>
                     </body>
                  </text>
               </TEI>
            </egXML>

            <p>The <gi>body</gi> of a dictionary which conforms to this specification may not only
               contain a flat series of entries but also examples (which are encoded as
                  <gi>cit</gi>/<gi>quote</gi> constructs). The rationale behind keeping example
               sentences outside the entries is to be able to reuse them in different parts of the
               dictionary (See below: <ref target="#examples">Examples and Creating
                  examples</ref>).<specDesc key="body"/></p>
            
            

           
         </div>
         <div>
            <head>Part 2: Formal Specification</head>

            <schemaSpec ident="acdh-ch-dicts" source="tmp/TEILex0.compiled.odd">

               <!-- We copy all modules from TEI Lex0  -->
               <moduleRef key="derived-module-TEILex0"/>
               <moduleRef key="analysis" except="c pc"/>
               <moduleRef key="core" except="hi q email num expan graphic"/>
               <moduleRef key="dictionaries" except="dictScrap hyph lbl syll stress"/>
               <moduleRef key="header" except="xenoData"/>
               <moduleRef key="linking"/>
               <moduleRef key="namesdates"/>
               <moduleRef key="tei"/>
               <moduleRef key="textstructure" except="back front"/>
               <moduleRef key="transcr" except="metamark"/>
               
               <elementSpec ident="body" mode="change" module="textstructure">
                  <desc>contains the main content of the dictionary. MUST include a <tag>div type="entries"</tag> and MAY include a <tag>div type="examples"</tag>.</desc>
                  <content>
                     <elementRef key="div" minOccurs="1" maxOccurs="2"/>
                  </content>
                  <constraintSpec ident="body-children" scheme="schematron">
                     <desc>assert typed div elements at the top of body</desc>
                     <constraint>
                        <s:rule context="tei:body">
                           <s:assert test="exists(tei:div[@type = 'entries'])">body must contain a div
                              of type "entries".</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
                  <exemplum>
                     <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="feasible">
                        <body>
                           <div type="entries">
                              <entry>...</entry>
                              <entry>...</entry>
                              <entry>...</entry>
                           </div>
                           <div type="examples">
                              <cit type="example" xml:id="ex001">
                                 <quote>...</quote>
                              </cit>
                           </div>
                        </body>
                     </egXML>
                  </exemplum>
               </elementSpec>
               
               <elementSpec ident="div" module="core" mode="change">
                  <constraintSpec ident="div-example-children" scheme="schematron">
                     <desc>assert content of top-level divisions</desc>
                     <constraint>
                        <s:rule context="tei:div[@type = 'examples']">
                           <s:assert test="every $e in * satisfies $e/self::tei:cit[@type = 'example']"
                              >div type="examples" may only contain cit type="example"</s:assert>
                        </s:rule>
                        <s:rule context="tei:div[@type = 'entries']">
                           <s:assert test="every $e in * satisfies $e/self::tei:entry">div
                              type="entries" may only contain entry elements</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="type" mode="replace" usage="req">
                        <valList type="closed">
                           <valItem ident="entries">
                              <desc>contains all entries in a dictionary</desc>
                           </valItem>
                           <valItem ident="examples">
                              <desc>contains examples used in the dictionary</desc>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>

               <!-- TEI Lex-0 adjustments to make the xsd deterministic 2024-06-26 -->
               <classSpec type="model" ident="model.hiLike" mode="change">
                  <classes mode="change">
                     <memberOf key="model.lexicalPhrase" mode="delete"/>
                  </classes>
               </classSpec>
               <elementSpec ident="xr" mode="change">
                  <classes mode="change">
                     <memberOf key="model.quoteLike" mode="delete"/>
                  </classes>
               </elementSpec>
               <elementSpec ident="lbl" mode="change">
                  <classes mode="change">
                     <memberOf key="model.emphLike" mode="delete"/>
                  </classes>
               </elementSpec>
               <elementSpec ident="publicationStmt" mode="change">
                  <content>
                     <sequence>
                        <classRef key="model.publicationStmtPart.agency" minOccurs="1"
                           maxOccurs="unbounded"/>
                        <!-- elements model.publicationStmtPart.detail, except for availability, which is required in Lex-0 -->
                        <alternate minOccurs="0" maxOccurs="unbounded">
                           <classRef key="model.ptrLike"/>
                           <elementRef key="date"/>
                           <elementRef key="pubPlace"/>
                           <elementRef key="idno"/>
                        </alternate>
                        <elementRef key="availability"/>
                     </sequence>
                  </content>
               </elementSpec>

               <!-- WATCHME If I don't redefine the content model of list here, the resulting XML 
            schema is violating the Unique particle attribution. We should find out, why. 
            2021-12-11 -->
               <elementSpec ident="list" mode="change">
                  <content>
                     <sequence>
                        <classRef key="model.divTop" minOccurs="0"/>
                        <sequence minOccurs="1" maxOccurs="unbounded">
                           <elementRef key="label" minOccurs="0"/>
                           <elementRef key="item" minOccurs="1" maxOccurs="1"/>
                        </sequence>
                     </sequence>
                  </content>
               </elementSpec>
               <!-- end of ambiguity-fixing adjustments -->

               <!-- Additionally needed elements -->
               <moduleRef key="iso-fs" include="fs f symbol"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="listChange"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="measure"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="ptr" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="interpretation"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>

               <!-- 
               TODO We should have a finer-grained definition for <usg type="corpusFrequency">
               For the time being, I'm simply adding <q> and <val>.
               DS 2021-12-02
            -->
               <elementRef key="q" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="val" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>

               <!-- TODO are we sure we want <mentioned> and <lb/> ? DS 2021-12-02-->
               <!-- I think we can make do without them DS 2024-07-26 -->
               <!--<elementRef key="mentioned"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementRef key="lb" source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>-->

               <!-- 
               for some reason I had to explicitly add model.featureVal
               and make <symbol> a member of it. We should find out why. 
               DS 2021-12-02 
            -->
               <classRef key="model.featureVal"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
               <elementSpec ident="symbol" mode="change">
                  <classes mode="change">
                     <memberOf key="model.featureVal"/>
                  </classes>
               </elementSpec>

               <classRef key="att.measurement"
                  source="https://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>

               <elementSpec ident="ptr" mode="change" module="core">
                  <constraintSpec ident="example-target" scheme="schematron">
                     <desc>rules that govern ptr elements</desc>
                     <constraint>
                        <s:rule
                           context="tei:ptr[@type = 'example'][matches(@target,'^#') and not(contains(@target,' '))]">
                           <s:assert
                              test="exists(root()//tei:cit[@type = 'example'][@xml:id = current()/substring-after(@target,'#')])"
                              >unknown example with id "<s:value-of
                                 select="current()/substring-after(@target,'#')"/>"</s:assert>
                        </s:rule>
                        <s:rule
                           context="tei:ptr[@type = 'example'][not(matches(@target,'^#')) or contains(@target,' ')]">
                           <s:report test="count(tokenize(@target,'\s')[.!='']) > 1">only one
                              pointer allowed in @target</s:report>
                           <s:report test="not(starts-with(normalize-space(@target),'#'))"
                              >unexpected value "<s:value-of select="current()/@target"/>": the
                              value of @target must be a fragment identifier pointing to an xml:id
                              of a dictionary example (tei:cit[@type='example'])</s:report>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>

               <elementSpec ident="seg" mode="change" module="linking">
                  <constraintSpec ident="seg-context" scheme="schematron">
                     <desc> assert correct context of seg</desc>
                     <constraint>
                        <s:rule context="tei:seg[@type = 'hint']">
                           <s:assert
                              test="parent::tei:quote[parent::tei:cit[@type = 'translation']]">a
                              hint segment must be inside a translation equivalent</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="type" mode="replace" usage="req">
                        <valList type="closed">
                           <valItem ident="hint">
                              <desc>a hint in a translation to narrow down the semantic scope of the
                                 particular item.</desc>
                           </valItem>
                           <valItem ident="constrPart">
                              <desc>TODO add description ???</desc>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>


               <elementSpec ident="gram" mode="change" module="dictionaries">
                  <attList>
                     <!-- TODO 2021-12-03 
                     Vocabularies should be moved to specific implementations. 
                     Also this one? 
                  -->
                     <attDef ident="type" mode="replace" usage="req">
                        <valList type="closed">
                           <valItem ident="arguments">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="aspect">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="constraint">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="constr">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="degree">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="derivedVerbClass">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="extension">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="frequency">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="followedBy">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="gender">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="government">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="inflectionType">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="keys">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="mood">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="morph">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="morphPattern">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="morphType">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="nominalState">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="number">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="person">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="pos">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="reg">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="root">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="roots">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="semCat">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="subc">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="usg">
                              <desc>hint on usage</desc>
                           </valItem>
                           <!-- shouldn't these become type="root" subtype="syn" or "dia"?    -->
                           <valItem ident="synRoot">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="diaRoot">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="diaRootNew">
                              <desc>TODO description missing</desc>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>

               <elementSpec ident="fs" mode="change">
                  <constraintSpec ident="fs-context" scheme="schematron">
                     <desc>assure that "fs" is only contained in cit/@type='example' and entry</desc>
                     <constraint>
                        <s:rule context="tei:fs">
                           <s:assert test="parent::tei:cit[@type='example'] or parent::tei:entry">fs is only contained by cit/@type example or entry</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>

               <!-- either text node or series of name elements -->
               <elementSpec ident="usg" mode="change">
                  <content>
                     <alternate minOccurs="1" maxOccurs="1">
                        <textNode/>
                        <elementRef key="name" minOccurs="1" maxOccurs="unbounded"/>
                     </alternate>
                  </content>
                  <constraintSpec ident="name-in-usg" scheme="schematron">
                     <desc>assert that only usg type geographic or socioCultural contain a name
                        element</desc>
                     <constraint>
                        <s:rule
                           context="tei:usg[not(@type = 'geographic') and not(@type='socioCultural')]">
                           <s:report test="exists(tei:name)">the name element must only occur inside
                              of usg elements with @type="geographic" or
                              @type="socioCultural".</s:report>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               
               <elementSpec ident="cit" mode="change" module="core">
                  <content>
                     <sequence>
                        <alternate minOccurs="1" maxOccurs="1">
                           <elementRef key="quote"/>
                           <elementRef key="form"/>
                        </alternate>
                        <alternate minOccurs="0" maxOccurs="unbounded">
                           <!-- both examples or translations have their textual content enclosed in quote elements -->
                           <!-- example entries may have 1–n nested translations -->
                           <elementRef key="cit" minOccurs="0" maxOccurs="unbounded"/>
                           <elementRef key="usg"/>
                           <elementRef key="note"/>
                           <elementRef key="gloss"/>
                           <!-- ADDED DS 2024-05-26 -->
                           <!--we should align th  e content more closely to the content in Lex0-->
                        </alternate>
                        <elementRef key="listBibl" minOccurs="0" maxOccurs="1"/>
                        <!-- change history of example entries  -->
                        <elementRef key="fs" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
                  <constraintSpec ident="cit-context" scheme="schematron">
                     <desc>assert correct context of cit types</desc>
                     <constraint>
                        <s:rule context="tei:cit[not(@type = 'example')]">
                           <s:report test="tei:listBibl">listBibl is only expected in cit/@type='example'</s:report>
                        </s:rule>
                        <s:rule context="tei:cit[@type = 'translationEquivalent']">
                           <s:assert test="parent::tei:sense">translationEquivalent: must be a direct child of a sense element</s:assert>
                           <s:assert test="exists(child::tei:form[not(@type)])">translationEquivalent must contain a form without a type attribute </s:assert>
                        </s:rule>
                        <s:rule context="tei:cit[@type = 'translation']">
                           <s:assert test="parent::tei:cit[@type = 'example']">cit/type="translation" must be part of an example</s:assert>
                           <s:report test="tei:form">tei:cit/@type = 'translation' may only contain a tei:quote element</s:report>
                           <s:report test="* except (tei:quote|tei:usg)">a
                              translation equivalent may only contain 1) the translated text in a
                              quote element, 2) the context of the translatoin in a tei:usg element</s:report>
                           <s:assert test="@subtype='literal' or @subtype='idiomatic'">only "literal" or "idiomatic" translations expected</s:assert>
                        </s:rule>
                        <s:rule context="tei:cit[@subtype = 'proverb']">
                           <s:assert test="@type = 'example'">unexpected value "<s:value-of
                                 select="current()/@type"/>" in @type – a proverb must be encoded as
                              cit type="example" subtype="proverb"</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="type" mode="replace" usage="req">
                        <valList type="closed">
                           <valItem ident="example">
                              <desc>A dictionary example. Ideally, examples should consist in
                                 complete sentences. Examples should be concise, but can also
                                 contain several sentences. If dialogical models are involved,
                                 sentences are to be separated by a dash.</desc>
                           </valItem>
                           <valItem ident="translationEquivalent">
                              <desc>A translation equivalent.</desc>
                           </valItem>
                           <valItem ident="translation">
                              <desc>A translation.</desc>
                           </valItem>
                           <valItem ident="etymon">
                              <desc>An etymon.</desc>
                           </valItem>
                        </valList>
                     </attDef>
                     <attDef ident="subtype" mode="replace" usage="opt">
                        <valList type="closed">
                           <valItem ident="proverb">
                              <desc>Proverbs are a subtype of example.</desc>
                           </valItem>
                           <valItem ident="scientificName">
                              <desc>contains a scientific name of a plants or similar</desc>
                           </valItem>
                           <valItem ident="literal">
                              <desc>marks a translation to be a literal translation (instead of a idiomatic one)</desc>
                           </valItem>
                           <valItem ident="idiomatic">
                              <desc>marks a translation to be a idiomatic translation (instead of a literal one)</desc>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>

               <elementSpec ident="listBibl" mode="change" module="core">
                  <content>
                     <!-- listBibls in the teiHeader can contain biblStruct, in all other contexts only bibl-->
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="bibl"/>
                        <elementRef key="biblStruct"/>
                     </alternate>
                  </content>
                  <constraintSpec ident="listBibl-context" scheme="schematron">
                     <constraint>
                        <s:rule context="tei:listBibl[ancestor::tei:body]">
                           <s:assert test="parent::tei:entry or parent::tei:cit[@type = 'example']">a listBibl is expected to be a direct child of an entry or an example</s:assert>
                           <s:assert test="not(tei:biblStruct)">a listBibl inside of an entry of an example is composed of bibl elements</s:assert>
                        </s:rule>                        
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               
               <!--<elementSpec ident="placeName" mode="change" module="namesdates">
                  <
               </elementSpec>
            -->
               <elementSpec ident="form" mode="change" module="dictionaries">
                  <constraintSpec ident="form-type" scheme="schematron">
                     <desc>assert content of correct context of @type values</desc>
                     <constraint>
                        <s:rule context="tei:form[@type = 'variant']">
                           <s:assert test="parent::tei:form[@type = ('lemma', 'inflected')]">a
                              variant must be a direct child of the main form (type = "lemma" or
                              "inflected").</s:assert>
                        </s:rule>
                        <s:rule context="tei:form[@type =  ('lemma', 'inflected')]">
                           <s:assert test="parent::tei:entry">a headword must be a direct child of
                              an entry element. </s:assert>
                        </s:rule>
                        <s:rule context="tei:form[@subtype='compound']">
                           <s:assert test="@type='lemma'">The subtype "compound" must be accompanied
                              by the type attribute "lemma".</s:assert>
                        </s:rule>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <!-- TODO In Zulu , there are <form>s without @type inside 
                     of cit type translation 
                     HOW TO treat? 2021-12-11 DS
                  -->
                     <attDef ident="type" mode="replace" usage="req">
                        <valList type="closed">
                           <valItem ident="lemma">
                              <desc>the headword of a lemma entry</desc>
                           </valItem>
                           <valItem ident="inflected">
                              <desc>inflected form</desc>
                           </valItem>
                           <!-- WHAT IS @type='infl' ? 
                    121 in baghdad dict, many empty orth elements
                    112 in apc
                -->
                           <!--<valItem ident="infl">
                    <desc>????</desc>
                </valItem>-->


                           <!-- WHEN IS THIS USED ? 16 instances in damascus dict  -->
                           <valItem ident="example">
                              <desc>???</desc>
                           </valItem>

                           <valItem ident="variant">
                              <desc>A variant form of the lemma. Only headwords may have variants.
                                 All other variants – e.g. competing morphological forms – are
                                 simply listed but not classified. Variants can be assigned usage
                                 labels indicating e.g. a particular register. The more frequent
                                 variant should precede less frequent ones. </desc>
                           </valItem>

                           <valItem ident="stem">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <valItem ident="derived">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <!-- in how far is @type = "lemmaVariant" different from @type = 'variant'? -->
                           <valItem ident="lemmaVariant">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <!-- WHEN IS THIS USED ?? -->
                           <valItem ident="construction">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <valItem ident="VN">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <valItem ident="infinitive">
                              <desc>TODO description missing</desc>
                           </valItem>

                           <valItem ident="adverbial">
                              <desc>TODO description missing</desc>
                           </valItem>


                           <valItem ident="abbreviation">
                              <desc>TODO description missing</desc>
                           </valItem>


                           <!-- TODO DS 2021-12-02 
                           These @types look complex – we should describe why 
                           they are different from the other "flat" values -->
                           <valItem ident="lexicalType:adverb">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="lexicalType:infinitive">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="lexicalType:infinitiveLocative">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="grammaticalCase:genitive">
                              <desc>TODO description missing</desc>
                           </valItem>
                           <valItem ident="grammaticalCase:vocative">
                              <desc>TODO description missing</desc>
                           </valItem>

                        </valList>
                     </attDef>
                     <attDef ident="subtype" mode="replace" usage="opt">
                        <valList type="closed">
                           <valItem ident="compound">
                              <desc>Used for multi-word units</desc>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
            </schemaSpec>
         </div>
      </body>
   </text>
</TEI>
